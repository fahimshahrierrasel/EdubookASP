#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EdubookASP
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Edubook")]
	public partial class EdubookDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertValidAnswer(ValidAnswer instance);
    partial void UpdateValidAnswer(ValidAnswer instance);
    partial void DeleteValidAnswer(ValidAnswer instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExamScore(ExamScore instance);
    partial void UpdateExamScore(ExamScore instance);
    partial void DeleteExamScore(ExamScore instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionOption(QuestionOption instance);
    partial void UpdateQuestionOption(QuestionOption instance);
    partial void DeleteQuestionOption(QuestionOption instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserAnswer(UserAnswer instance);
    partial void UpdateUserAnswer(UserAnswer instance);
    partial void DeleteUserAnswer(UserAnswer instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    #endregion
		
		public EdubookDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EdubookConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EdubookDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EdubookDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EdubookDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EdubookDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<ValidAnswer> ValidAnswers
		{
			get
			{
				return this.GetTable<ValidAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<ExamScore> ExamScores
		{
			get
			{
				return this.GetTable<ExamScore>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionOption> QuestionOptions
		{
			get
			{
				return this.GetTable<QuestionOption>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserAnswer> UserAnswers
		{
			get
			{
				return this.GetTable<UserAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertNewUser")]
		public int InsertNewUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Username", DbType="VarChar(30)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(100)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PassHash", DbType="VarChar(200)")] string passHash, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BirthDate", DbType="Date")] System.Nullable<System.DateTime> birthDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, email, passHash, firstName, lastName, birthDate, city);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CmtId;
		
		private string _CmtText;
		
		private int _Profile_ProfileId;
		
		private int _Post_PostId;
		
		private EntityRef<Profile> _Profile;
		
		private EntityRef<Post> _Post;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCmtIdChanging(int value);
    partial void OnCmtIdChanged();
    partial void OnCmtTextChanging(string value);
    partial void OnCmtTextChanged();
    partial void OnProfile_ProfileIdChanging(int value);
    partial void OnProfile_ProfileIdChanged();
    partial void OnPost_PostIdChanging(int value);
    partial void OnPost_PostIdChanged();
    #endregion
		
		public Comment()
		{
			this._Profile = default(EntityRef<Profile>);
			this._Post = default(EntityRef<Post>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmtId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CmtId
		{
			get
			{
				return this._CmtId;
			}
			set
			{
				if ((this._CmtId != value))
				{
					this.OnCmtIdChanging(value);
					this.SendPropertyChanging();
					this._CmtId = value;
					this.SendPropertyChanged("CmtId");
					this.OnCmtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmtText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CmtText
		{
			get
			{
				return this._CmtText;
			}
			set
			{
				if ((this._CmtText != value))
				{
					this.OnCmtTextChanging(value);
					this.SendPropertyChanging();
					this._CmtText = value;
					this.SendPropertyChanged("CmtText");
					this.OnCmtTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_ProfileId", DbType="Int NOT NULL")]
		public int Profile_ProfileId
		{
			get
			{
				return this._Profile_ProfileId;
			}
			set
			{
				if ((this._Profile_ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_ProfileIdChanging(value);
					this.SendPropertyChanging();
					this._Profile_ProfileId = value;
					this.SendPropertyChanged("Profile_ProfileId");
					this.OnProfile_ProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Post_PostId", DbType="Int NOT NULL")]
		public int Post_PostId
		{
			get
			{
				return this._Post_PostId;
			}
			set
			{
				if ((this._Post_PostId != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPost_PostIdChanging(value);
					this.SendPropertyChanging();
					this._Post_PostId = value;
					this.SendPropertyChanged("Post_PostId");
					this.OnPost_PostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Comment", Storage="_Profile", ThisKey="Profile_ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._Profile_ProfileId = value.ProfileId;
					}
					else
					{
						this._Profile_ProfileId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Comment", Storage="_Post", ThisKey="Post_PostId", OtherKey="PostId", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._Post_PostId = value.PostId;
					}
					else
					{
						this._Post_PostId = default(int);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValidAnswer")]
	public partial class ValidAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ValidAnswerId;
		
		private int _AnsOptNo;
		
		private string _AnswerText;
		
		private int _Question_QuestionId;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValidAnswerIdChanging(int value);
    partial void OnValidAnswerIdChanged();
    partial void OnAnsOptNoChanging(int value);
    partial void OnAnsOptNoChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    partial void OnQuestion_QuestionIdChanging(int value);
    partial void OnQuestion_QuestionIdChanged();
    #endregion
		
		public ValidAnswer()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidAnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ValidAnswerId
		{
			get
			{
				return this._ValidAnswerId;
			}
			set
			{
				if ((this._ValidAnswerId != value))
				{
					this.OnValidAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._ValidAnswerId = value;
					this.SendPropertyChanged("ValidAnswerId");
					this.OnValidAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsOptNo", DbType="Int NOT NULL")]
		public int AnsOptNo
		{
			get
			{
				return this._AnsOptNo;
			}
			set
			{
				if ((this._AnsOptNo != value))
				{
					this.OnAnsOptNoChanging(value);
					this.SendPropertyChanging();
					this._AnsOptNo = value;
					this.SendPropertyChanged("AnsOptNo");
					this.OnAnsOptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerText", DbType="VarChar(300)")]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_QuestionId", DbType="Int NOT NULL")]
		public int Question_QuestionId
		{
			get
			{
				return this._Question_QuestionId;
			}
			set
			{
				if ((this._Question_QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_QuestionIdChanging(value);
					this.SendPropertyChanging();
					this._Question_QuestionId = value;
					this.SendPropertyChanged("Question_QuestionId");
					this.OnQuestion_QuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_ValidAnswer", Storage="_Question", ThisKey="Question_QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.ValidAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.ValidAnswers.Add(this);
						this._Question_QuestionId = value.QuestionId;
					}
					else
					{
						this._Question_QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamId;
		
		private System.DateTime _ExamDate;
		
		private string _ExamName;
		
		private string _Description;
		
		private int _Profile_ProfileId;
		
		private EntitySet<ExamScore> _ExamScores;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<UserAnswer> _UserAnswers;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIdChanging(int value);
    partial void OnExamIdChanged();
    partial void OnExamDateChanging(System.DateTime value);
    partial void OnExamDateChanged();
    partial void OnExamNameChanging(string value);
    partial void OnExamNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProfile_ProfileIdChanging(int value);
    partial void OnProfile_ProfileIdChanged();
    #endregion
		
		public Exam()
		{
			this._ExamScores = new EntitySet<ExamScore>(new Action<ExamScore>(this.attach_ExamScores), new Action<ExamScore>(this.detach_ExamScores));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._UserAnswers = new EntitySet<UserAnswer>(new Action<UserAnswer>(this.attach_UserAnswers), new Action<UserAnswer>(this.detach_UserAnswers));
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamDate", DbType="Date NOT NULL")]
		public System.DateTime ExamDate
		{
			get
			{
				return this._ExamDate;
			}
			set
			{
				if ((this._ExamDate != value))
				{
					this.OnExamDateChanging(value);
					this.SendPropertyChanging();
					this._ExamDate = value;
					this.SendPropertyChanged("ExamDate");
					this.OnExamDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamName", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string ExamName
		{
			get
			{
				return this._ExamName;
			}
			set
			{
				if ((this._ExamName != value))
				{
					this.OnExamNameChanging(value);
					this.SendPropertyChanging();
					this._ExamName = value;
					this.SendPropertyChanged("ExamName");
					this.OnExamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_ProfileId", DbType="Int NOT NULL")]
		public int Profile_ProfileId
		{
			get
			{
				return this._Profile_ProfileId;
			}
			set
			{
				if ((this._Profile_ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_ProfileIdChanging(value);
					this.SendPropertyChanging();
					this._Profile_ProfileId = value;
					this.SendPropertyChanged("Profile_ProfileId");
					this.OnProfile_ProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamScore", Storage="_ExamScores", ThisKey="ExamId", OtherKey="Exam_ExamId")]
		public EntitySet<ExamScore> ExamScores
		{
			get
			{
				return this._ExamScores;
			}
			set
			{
				this._ExamScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Question", Storage="_Questions", ThisKey="ExamId", OtherKey="Exam_ExamId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_UserAnswer", Storage="_UserAnswers", ThisKey="ExamId", OtherKey="Exam_ExamId")]
		public EntitySet<UserAnswer> UserAnswers
		{
			get
			{
				return this._UserAnswers;
			}
			set
			{
				this._UserAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Exam", Storage="_Profile", ThisKey="Profile_ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._Profile_ProfileId = value.ProfileId;
					}
					else
					{
						this._Profile_ProfileId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamScores(ExamScore entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamScores(ExamScore entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
		
		private void attach_UserAnswers(UserAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_UserAnswers(UserAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamScore")]
	public partial class ExamScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamScoreId;
		
		private int _Correct;
		
		private int _Wrong;
		
		private int _Profile_ProfileId;
		
		private int _Exam_ExamId;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamScoreIdChanging(int value);
    partial void OnExamScoreIdChanged();
    partial void OnCorrectChanging(int value);
    partial void OnCorrectChanged();
    partial void OnWrongChanging(int value);
    partial void OnWrongChanged();
    partial void OnProfile_ProfileIdChanging(int value);
    partial void OnProfile_ProfileIdChanged();
    partial void OnExam_ExamIdChanging(int value);
    partial void OnExam_ExamIdChanged();
    #endregion
		
		public ExamScore()
		{
			this._Exam = default(EntityRef<Exam>);
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamScoreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamScoreId
		{
			get
			{
				return this._ExamScoreId;
			}
			set
			{
				if ((this._ExamScoreId != value))
				{
					this.OnExamScoreIdChanging(value);
					this.SendPropertyChanging();
					this._ExamScoreId = value;
					this.SendPropertyChanged("ExamScoreId");
					this.OnExamScoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="Int NOT NULL")]
		public int Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wrong", DbType="Int NOT NULL")]
		public int Wrong
		{
			get
			{
				return this._Wrong;
			}
			set
			{
				if ((this._Wrong != value))
				{
					this.OnWrongChanging(value);
					this.SendPropertyChanging();
					this._Wrong = value;
					this.SendPropertyChanged("Wrong");
					this.OnWrongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_ProfileId", DbType="Int NOT NULL")]
		public int Profile_ProfileId
		{
			get
			{
				return this._Profile_ProfileId;
			}
			set
			{
				if ((this._Profile_ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_ProfileIdChanging(value);
					this.SendPropertyChanging();
					this._Profile_ProfileId = value;
					this.SendPropertyChanged("Profile_ProfileId");
					this.OnProfile_ProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_ExamId", DbType="Int NOT NULL")]
		public int Exam_ExamId
		{
			get
			{
				return this._Exam_ExamId;
			}
			set
			{
				if ((this._Exam_ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExam_ExamIdChanging(value);
					this.SendPropertyChanging();
					this._Exam_ExamId = value;
					this.SendPropertyChanged("Exam_ExamId");
					this.OnExam_ExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamScore", Storage="_Exam", ThisKey="Exam_ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamScores.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamScores.Add(this);
						this._Exam_ExamId = value.ExamId;
					}
					else
					{
						this._Exam_ExamId = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_ExamScore", Storage="_Profile", ThisKey="Profile_ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.ExamScores.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.ExamScores.Add(this);
						this._Profile_ProfileId = value.ProfileId;
					}
					else
					{
						this._Profile_ProfileId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friend")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Profile_FriendId;
		
		private int _User_UserId;
		
		private EntityRef<Profile> _Profile;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfile_FriendIdChanging(int value);
    partial void OnProfile_FriendIdChanged();
    partial void OnUser_UserIdChanging(int value);
    partial void OnUser_UserIdChanged();
    #endregion
		
		public Friend()
		{
			this._Profile = default(EntityRef<Profile>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_FriendId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Profile_FriendId
		{
			get
			{
				return this._Profile_FriendId;
			}
			set
			{
				if ((this._Profile_FriendId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_FriendIdChanging(value);
					this.SendPropertyChanging();
					this._Profile_FriendId = value;
					this.SendPropertyChanged("Profile_FriendId");
					this.OnProfile_FriendIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_UserId", DbType="Int NOT NULL")]
		public int User_UserId
		{
			get
			{
				return this._User_UserId;
			}
			set
			{
				if ((this._User_UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_UserIdChanging(value);
					this.SendPropertyChanging();
					this._User_UserId = value;
					this.SendPropertyChanged("User_UserId");
					this.OnUser_UserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Friend", Storage="_Profile", ThisKey="Profile_FriendId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Friend = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Friend = this;
						this._Profile_FriendId = value.ProfileId;
					}
					else
					{
						this._Profile_FriendId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_User", ThisKey="User_UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friends.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friends.Add(this);
						this._User_UserId = value.UserId;
					}
					else
					{
						this._User_UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _BirthDate;
		
		private string _City;
		
		private string _Education;
		
		private string _Institution;
		
		private int _Rating;
		
		private string _FavTag;
		
		private string _About;
		
		private string _PhotoUrl;
		
		private int _User_UserId;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Exam> _Exams;
		
		private EntitySet<ExamScore> _ExamScores;
		
		private EntityRef<Friend> _Friend;
		
		private EntitySet<UserAnswer> _UserAnswers;
		
		private EntitySet<Post> _Posts;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIdChanging(int value);
    partial void OnProfileIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnEducationChanging(string value);
    partial void OnEducationChanged();
    partial void OnInstitutionChanging(string value);
    partial void OnInstitutionChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnFavTagChanging(string value);
    partial void OnFavTagChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnUser_UserIdChanging(int value);
    partial void OnUser_UserIdChanged();
    #endregion
		
		public Profile()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			this._ExamScores = new EntitySet<ExamScore>(new Action<ExamScore>(this.attach_ExamScores), new Action<ExamScore>(this.detach_ExamScores));
			this._Friend = default(EntityRef<Friend>);
			this._UserAnswers = new EntitySet<UserAnswer>(new Action<UserAnswer>(this.attach_UserAnswers), new Action<UserAnswer>(this.detach_UserAnswers));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="VarChar(100)")]
		public string Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Institution", DbType="VarChar(200)")]
		public string Institution
		{
			get
			{
				return this._Institution;
			}
			set
			{
				if ((this._Institution != value))
				{
					this.OnInstitutionChanging(value);
					this.SendPropertyChanging();
					this._Institution = value;
					this.SendPropertyChanged("Institution");
					this.OnInstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavTag", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FavTag
		{
			get
			{
				return this._FavTag;
			}
			set
			{
				if ((this._FavTag != value))
				{
					this.OnFavTagChanging(value);
					this.SendPropertyChanging();
					this._FavTag = value;
					this.SendPropertyChanged("FavTag");
					this.OnFavTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="VarChar(300)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_UserId", DbType="Int NOT NULL")]
		public int User_UserId
		{
			get
			{
				return this._User_UserId;
			}
			set
			{
				if ((this._User_UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_UserIdChanging(value);
					this.SendPropertyChanging();
					this._User_UserId = value;
					this.SendPropertyChanged("User_UserId");
					this.OnUser_UserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Comment", Storage="_Comments", ThisKey="ProfileId", OtherKey="Profile_ProfileId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Exam", Storage="_Exams", ThisKey="ProfileId", OtherKey="Profile_ProfileId")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_ExamScore", Storage="_ExamScores", ThisKey="ProfileId", OtherKey="Profile_ProfileId")]
		public EntitySet<ExamScore> ExamScores
		{
			get
			{
				return this._ExamScores;
			}
			set
			{
				this._ExamScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Friend", Storage="_Friend", ThisKey="ProfileId", OtherKey="Profile_FriendId", IsUnique=true, IsForeignKey=false)]
		public Friend Friend
		{
			get
			{
				return this._Friend.Entity;
			}
			set
			{
				Friend previousValue = this._Friend.Entity;
				if (((previousValue != value) 
							|| (this._Friend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Friend.Entity = null;
						previousValue.Profile = null;
					}
					this._Friend.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
					}
					this.SendPropertyChanged("Friend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_UserAnswer", Storage="_UserAnswers", ThisKey="ProfileId", OtherKey="Profile_ProfileId")]
		public EntitySet<UserAnswer> UserAnswers
		{
			get
			{
				return this._UserAnswers;
			}
			set
			{
				this._UserAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Post", Storage="_Posts", ThisKey="ProfileId", OtherKey="Profile_ProfileId")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profile", Storage="_User", ThisKey="User_UserId", OtherKey="UserId", IsForeignKey=true)]
		public User MyUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._User_UserId = value.UserId;
					}
					else
					{
						this._User_UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_ExamScores(ExamScore entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_ExamScores(ExamScore entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_UserAnswers(UserAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_UserAnswers(UserAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Profile = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Profile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private string _QuesText;
		
		private int _Exam_ExamId;
		
		private EntitySet<ValidAnswer> _ValidAnswers;
		
		private EntitySet<QuestionOption> _QuestionOptions;
		
		private EntitySet<UserAnswer> _UserAnswers;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnQuesTextChanging(string value);
    partial void OnQuesTextChanged();
    partial void OnExam_ExamIdChanging(int value);
    partial void OnExam_ExamIdChanged();
    #endregion
		
		public Question()
		{
			this._ValidAnswers = new EntitySet<ValidAnswer>(new Action<ValidAnswer>(this.attach_ValidAnswers), new Action<ValidAnswer>(this.detach_ValidAnswers));
			this._QuestionOptions = new EntitySet<QuestionOption>(new Action<QuestionOption>(this.attach_QuestionOptions), new Action<QuestionOption>(this.detach_QuestionOptions));
			this._UserAnswers = new EntitySet<UserAnswer>(new Action<UserAnswer>(this.attach_UserAnswers), new Action<UserAnswer>(this.detach_UserAnswers));
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuesText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string QuesText
		{
			get
			{
				return this._QuesText;
			}
			set
			{
				if ((this._QuesText != value))
				{
					this.OnQuesTextChanging(value);
					this.SendPropertyChanging();
					this._QuesText = value;
					this.SendPropertyChanged("QuesText");
					this.OnQuesTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_ExamId", DbType="Int NOT NULL")]
		public int Exam_ExamId
		{
			get
			{
				return this._Exam_ExamId;
			}
			set
			{
				if ((this._Exam_ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExam_ExamIdChanging(value);
					this.SendPropertyChanging();
					this._Exam_ExamId = value;
					this.SendPropertyChanged("Exam_ExamId");
					this.OnExam_ExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_ValidAnswer", Storage="_ValidAnswers", ThisKey="QuestionId", OtherKey="Question_QuestionId")]
		public EntitySet<ValidAnswer> ValidAnswers
		{
			get
			{
				return this._ValidAnswers;
			}
			set
			{
				this._ValidAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionOption", Storage="_QuestionOptions", ThisKey="QuestionId", OtherKey="Question_QuestionId")]
		public EntitySet<QuestionOption> QuestionOptions
		{
			get
			{
				return this._QuestionOptions;
			}
			set
			{
				this._QuestionOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_UserAnswer", Storage="_UserAnswers", ThisKey="QuestionId", OtherKey="Question_QuestionId")]
		public EntitySet<UserAnswer> UserAnswers
		{
			get
			{
				return this._UserAnswers;
			}
			set
			{
				this._UserAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_Question", Storage="_Exam", ThisKey="Exam_ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._Exam_ExamId = value.ExamId;
					}
					else
					{
						this._Exam_ExamId = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ValidAnswers(ValidAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_ValidAnswers(ValidAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_QuestionOptions(QuestionOption entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionOptions(QuestionOption entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_UserAnswers(UserAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_UserAnswers(UserAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionOption")]
	public partial class QuestionOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OptionId;
		
		private int _OptNo;
		
		private string _OptText;
		
		private int _Question_QuestionId;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOptionIdChanging(int value);
    partial void OnOptionIdChanged();
    partial void OnOptNoChanging(int value);
    partial void OnOptNoChanged();
    partial void OnOptTextChanging(string value);
    partial void OnOptTextChanged();
    partial void OnQuestion_QuestionIdChanging(int value);
    partial void OnQuestion_QuestionIdChanged();
    #endregion
		
		public QuestionOption()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OptionId
		{
			get
			{
				return this._OptionId;
			}
			set
			{
				if ((this._OptionId != value))
				{
					this.OnOptionIdChanging(value);
					this.SendPropertyChanging();
					this._OptionId = value;
					this.SendPropertyChanged("OptionId");
					this.OnOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptNo", DbType="Int NOT NULL")]
		public int OptNo
		{
			get
			{
				return this._OptNo;
			}
			set
			{
				if ((this._OptNo != value))
				{
					this.OnOptNoChanging(value);
					this.SendPropertyChanging();
					this._OptNo = value;
					this.SendPropertyChanged("OptNo");
					this.OnOptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptText", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string OptText
		{
			get
			{
				return this._OptText;
			}
			set
			{
				if ((this._OptText != value))
				{
					this.OnOptTextChanging(value);
					this.SendPropertyChanging();
					this._OptText = value;
					this.SendPropertyChanged("OptText");
					this.OnOptTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_QuestionId", DbType="Int NOT NULL")]
		public int Question_QuestionId
		{
			get
			{
				return this._Question_QuestionId;
			}
			set
			{
				if ((this._Question_QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_QuestionIdChanging(value);
					this.SendPropertyChanging();
					this._Question_QuestionId = value;
					this.SendPropertyChanged("Question_QuestionId");
					this.OnQuestion_QuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionOption", Storage="_Question", ThisKey="Question_QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionOptions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionOptions.Add(this);
						this._Question_QuestionId = value.QuestionId;
					}
					else
					{
						this._Question_QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private System.DateTime _RegDate;
		
		private EntitySet<Friend> _Friends;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRegDateChanging(System.DateTime value);
    partial void OnRegDateChanged();
    #endregion
		
		public User()
		{
			this._Friends = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends), new Action<Friend>(this.detach_Friends));
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="Date NOT NULL")]
		public System.DateTime RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_Friends", ThisKey="UserId", OtherKey="User_UserId")]
		public EntitySet<Friend> Friends
		{
			get
			{
				return this._Friends;
			}
			set
			{
				this._Friends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profile", Storage="_Profiles", ThisKey="UserId", OtherKey="User_UserId")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.MyUser = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.MyUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAnswers")]
	public partial class UserAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAnswerNo;
		
		private int _Exam_ExamId;
		
		private int _Question_QuestionId;
		
		private int _AnsOptNo;
		
		private int _Profile_ProfileId;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Profile> _Profile;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAnswerNoChanging(int value);
    partial void OnUserAnswerNoChanged();
    partial void OnExam_ExamIdChanging(int value);
    partial void OnExam_ExamIdChanged();
    partial void OnQuestion_QuestionIdChanging(int value);
    partial void OnQuestion_QuestionIdChanged();
    partial void OnAnsOptNoChanging(int value);
    partial void OnAnsOptNoChanged();
    partial void OnProfile_ProfileIdChanging(int value);
    partial void OnProfile_ProfileIdChanged();
    #endregion
		
		public UserAnswer()
		{
			this._Exam = default(EntityRef<Exam>);
			this._Profile = default(EntityRef<Profile>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAnswerNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAnswerNo
		{
			get
			{
				return this._UserAnswerNo;
			}
			set
			{
				if ((this._UserAnswerNo != value))
				{
					this.OnUserAnswerNoChanging(value);
					this.SendPropertyChanging();
					this._UserAnswerNo = value;
					this.SendPropertyChanged("UserAnswerNo");
					this.OnUserAnswerNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_ExamId", DbType="Int NOT NULL")]
		public int Exam_ExamId
		{
			get
			{
				return this._Exam_ExamId;
			}
			set
			{
				if ((this._Exam_ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExam_ExamIdChanging(value);
					this.SendPropertyChanging();
					this._Exam_ExamId = value;
					this.SendPropertyChanged("Exam_ExamId");
					this.OnExam_ExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_QuestionId", DbType="Int NOT NULL")]
		public int Question_QuestionId
		{
			get
			{
				return this._Question_QuestionId;
			}
			set
			{
				if ((this._Question_QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_QuestionIdChanging(value);
					this.SendPropertyChanging();
					this._Question_QuestionId = value;
					this.SendPropertyChanged("Question_QuestionId");
					this.OnQuestion_QuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsOptNo", DbType="Int NOT NULL")]
		public int AnsOptNo
		{
			get
			{
				return this._AnsOptNo;
			}
			set
			{
				if ((this._AnsOptNo != value))
				{
					this.OnAnsOptNoChanging(value);
					this.SendPropertyChanging();
					this._AnsOptNo = value;
					this.SendPropertyChanged("AnsOptNo");
					this.OnAnsOptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_ProfileId", DbType="Int NOT NULL")]
		public int Profile_ProfileId
		{
			get
			{
				return this._Profile_ProfileId;
			}
			set
			{
				if ((this._Profile_ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_ProfileIdChanging(value);
					this.SendPropertyChanging();
					this._Profile_ProfileId = value;
					this.SendPropertyChanged("Profile_ProfileId");
					this.OnProfile_ProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_UserAnswer", Storage="_Exam", ThisKey="Exam_ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.UserAnswers.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.UserAnswers.Add(this);
						this._Exam_ExamId = value.ExamId;
					}
					else
					{
						this._Exam_ExamId = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_UserAnswer", Storage="_Profile", ThisKey="Profile_ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.UserAnswers.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.UserAnswers.Add(this);
						this._Profile_ProfileId = value.ProfileId;
					}
					else
					{
						this._Profile_ProfileId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_UserAnswer", Storage="_Question", ThisKey="Question_QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.UserAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.UserAnswers.Add(this);
						this._Question_QuestionId = value.QuestionId;
					}
					else
					{
						this._Question_QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostId;
		
		private string _PostText;
		
		private int _Likes;
		
		private string _Tags;
		
		private System.DateTime _PostDateTime;
		
		private int _Profile_ProfileId;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIdChanging(int value);
    partial void OnPostIdChanged();
    partial void OnPostTextChanging(string value);
    partial void OnPostTextChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnPostDateTimeChanging(System.DateTime value);
    partial void OnPostDateTimeChanged();
    partial void OnProfile_ProfileIdChanging(int value);
    partial void OnProfile_ProfileIdChanged();
    #endregion
		
		public Post()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostId
		{
			get
			{
				return this._PostId;
			}
			set
			{
				if ((this._PostId != value))
				{
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._PostId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PostText
		{
			get
			{
				return this._PostText;
			}
			set
			{
				if ((this._PostText != value))
				{
					this.OnPostTextChanging(value);
					this.SendPropertyChanging();
					this._PostText = value;
					this.SendPropertyChanged("PostText");
					this.OnPostTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime PostDateTime
		{
			get
			{
				return this._PostDateTime;
			}
			set
			{
				if ((this._PostDateTime != value))
				{
					this.OnPostDateTimeChanging(value);
					this.SendPropertyChanging();
					this._PostDateTime = value;
					this.SendPropertyChanged("PostDateTime");
					this.OnPostDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_ProfileId", DbType="Int NOT NULL")]
		public int Profile_ProfileId
		{
			get
			{
				return this._Profile_ProfileId;
			}
			set
			{
				if ((this._Profile_ProfileId != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_ProfileIdChanging(value);
					this.SendPropertyChanging();
					this._Profile_ProfileId = value;
					this.SendPropertyChanged("Profile_ProfileId");
					this.OnProfile_ProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Comment", Storage="_Comments", ThisKey="PostId", OtherKey="Post_PostId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profile_Post", Storage="_Profile", ThisKey="Profile_ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._Profile_ProfileId = value.ProfileId;
					}
					else
					{
						this._Profile_ProfileId = default(int);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
}
#pragma warning restore 1591
